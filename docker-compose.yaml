# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose


services:
  users-db:
    image: postgres
    container_name: users-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users_db
    ports:
      - "10021:5432"
    networks:
      - my-network
    volumes:
      - users-db-data:/var/lib/postgresql/data

  devices-db:
    image: postgres
    container_name: devices-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: devices_db
    ports:
      - "10022:5432"
    networks:
      - my-network
    volumes:
      - devices-db-data:/var/lib/postgresql/data

  users-app:
    build:
      context: ./users-app
      dockerfile: Dockerfile
    container_name: users-app
    ports:
      - "8081:8080"
    networks:
      - my-network
    depends_on:
      - users-db

  devices-app:
    build:
      context: ./devices-app
      dockerfile: Dockerfile
    container_name: devices-app
    ports:
      - "8082:8080"
    networks:
      - my-network
    depends_on:
      - devices-db

  react-demo-master:
    build:
      context: ./react-demo-master
      dockerfile: Dockerfile
    container_name: react-demo-master
    ports:
      - "3000:3000"
    networks:
      - my-network
    depends_on:
      - users-app
      - devices-app

networks:
  my-network:
    driver: bridge

volumes:
  users-db-data:
  devices-db-data:


#
#  users-app:
#    image: users-app:latest
#    build:
#      context: .
#      dockerfile: Dockerfile
#    ports:
#      - "8081:8081"
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://users-db:5432/users_db
#      SPRING_DATASOURCE_USERNAME: user_users
#      SPRING_DATASOURCE_PASSWORD: password_users
#    depends_on:
#      - users-db
#
#
#  users-db:
#    image: postgres:latest
#    ports:
#      - "10021:5432"
#    environment:
#      POSTGRES_DB: users_db
#      POSTGRES_USER: user_users
#      POSTGRES_PASSWORD: password_users
#    volumes:
#      - postgres_data:/var/lib/postgresql/data


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

